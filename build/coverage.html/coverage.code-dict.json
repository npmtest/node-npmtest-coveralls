{"/home/travis/build/npmtest/node-npmtest-coveralls/test.js":"/* istanbul instrument in package npmtest_coveralls */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-coveralls/lib.npmtest_coveralls.js":"/* istanbul instrument in package npmtest_coveralls */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_coveralls = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_coveralls = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-coveralls/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-coveralls && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_coveralls */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_coveralls\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_coveralls.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_coveralls.rollup.js'] =\n            local.assetsDict['/assets.npmtest_coveralls.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_coveralls.__dirname +\n                    '/lib.npmtest_coveralls.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-coveralls/coveralls/index.js":"var minimist = require('minimist');\n\n// this needs to go before the other require()s so that\n// the other files can already use index.options\nexports.options = minimist(process.argv.slice(2), {\n  boolean: ['verbose', 'stdout'],\n  alias: { 'v': 'verbose', 's': 'stdout' }\n});\n\nvar dir = './lib/';\nexports.convertLcovToCoveralls = require(dir + 'convertLcovToCoveralls');\nexports.sendToCoveralls = require(dir + 'sendToCoveralls');\nexports.getBaseOptions = require(dir + 'getOptions').getBaseOptions;\nexports.getOptions = require(dir + 'getOptions').getOptions;\nexports.handleInput = require(dir + 'handleInput');\nexports.logger = require(dir + 'logger');\n","/home/travis/build/npmtest/node-npmtest-coveralls/coveralls/lib/convertLcovToCoveralls.js":"var TRAVIS_JOB_ID = process.env.TRAVIS_JOB_ID || 'unknown';\nvar fs = require('fs');\nvar lcovParse = require('lcov-parse');\nvar path = require('path');\nvar logger = require('./logger')();\n\nvar detailsToCoverage = function(length, details){\n  var coverage = new Array(length);\n  details.forEach(function(obj){\n    coverage[obj.line - 1] = obj.hit;\n  });\n  return coverage;\n};\n\nvar detailsToBranches = function(details){\n  var branches = [];\n  details.forEach(function(obj){\n    ['line','block','branch','taken'].forEach(function(key){\n      branches.push(obj[key] || 0);\n    });\n  });\n  return branches;\n};\n\nvar convertLcovFileObject = function(file, filepath){\n  var rootpath = filepath;\n  filepath = path.resolve(rootpath, file.file);\n\tvar source = fs.readFileSync(filepath, 'utf8');\n\tvar lines = source.split(\"\\n\");\n\tvar coverage = detailsToCoverage(lines.length, file.lines.details);\n  var branches = detailsToBranches(file.branches.details);\n\treturn { name     : path.relative(rootpath, path.resolve(rootpath, file.file)).split( path.sep ).join( \"/\" ),\n           source   : source,\n           coverage : coverage,\n           branches : branches };\n};\n\nvar cleanFilePath = function(file) {\n  if (file.indexOf('!') > -1) {\n    var regex = /^(.*!)(.*)$/g;\n    var matches = regex.exec(file);\n    return matches[matches.length-1];\n  }\n\n  return file;\n};\n\nvar convertLcovToCoveralls = function(input, options, cb){\n  var filepath = options.filepath || '';\n  logger.debug(\"in: \", filepath);\n  filepath = path.resolve(process.cwd(), filepath);\n  lcovParse(input, function(err, parsed){\n    if (err){\n      logger.error(\"error from lcovParse: \", err);\n      logger.error(\"input: \", input);\n      return cb(err);\n    }\n    var postJson = {\n      source_files : []\n    };\n    if (options.git){\n      postJson.git = options.git;\n    }\n    if (options.run_at){\n      postJson.run_at = options.run_at;\n    }\n    if (options.service_name){\n      postJson.service_name = options.service_name;\n    }\n    if (options.service_job_id){\n      postJson.service_job_id = options.service_job_id;\n    }\n    if (options.service_pull_request) {\n      postJson.service_pull_request = options.service_pull_request;\n    }\n    if (options.repo_token) {\n      postJson.repo_token = options.repo_token;\n    }\n    if (options.parallel) {\n      postJson.parallel = options.parallel;\n    }\n    if (options.service_pull_request) {\n      postJson.service_pull_request = options.service_pull_request;\n    }\n    parsed.forEach(function(file){\n      file.file = cleanFilePath(file.file);\n      var currentFilePath = path.resolve(filepath, file.file);\n      if (fs.existsSync(currentFilePath)) {\n        postJson.source_files.push(convertLcovFileObject(file, filepath));\n      }\n    });\n    return cb(null, postJson);\n  });\n};\n\nmodule.exports = convertLcovToCoveralls;\n\n/* example coveralls json file\n\n\n{\n  \"service_job_id\": \"1234567890\",\n  \"service_name\": \"travis-ci\",\n  \"source_files\": [\n    {\n      \"name\": \"example.rb\",\n      \"source\": \"def four\\n  4\\nend\",\n      \"coverage\": [null, 1, null]\n    },\n    {\n      \"name\": \"two.rb\",\n      \"source\": \"def seven\\n  eight\\n  nine\\nend\",\n      \"coverage\": [null, 1, 0, null]\n    }\n  ]\n}\n\n\nexample output from lcov parser:\n\n [\n  {\n    \"file\": \"index.js\",\n    \"lines\": {\n      \"found\": 0,\n      \"hit\": 0,\n      \"details\": [\n        {\n          \"line\": 1,\n          \"hit\": 1\n        },\n        {\n          \"line\": 2,\n          \"hit\": 1\n        },\n        {\n          \"line\": 3,\n          \"hit\": 1\n        },\n        {\n          \"line\": 5,\n          \"hit\": 1\n        },\n\n*/\n","/home/travis/build/npmtest/node-npmtest-coveralls/coveralls/lib/logger.js":"var index = require('../index');\n\nmodule.exports = function(){\n  return require('log-driver')({level : getLogLevel()});\n};\n\nfunction getLogLevel(){\n  if (index.options.verbose || hasDebugEnvVariable()) {\n    return 'warn';\n  }\n  return 'error';\n}\n\nfunction hasDebugEnvVariable(){\n    return process.env.NODE_COVERALLS_DEBUG == 1;\n}\n","/home/travis/build/npmtest/node-npmtest-coveralls/coveralls/lib/sendToCoveralls.js":"var request = require('request');\nvar index = require('../index');\n\nvar sendToCoveralls = function(obj, cb){\n  var urlBase = 'https://coveralls.io';\n  if (process.env.COVERALLS_ENDPOINT) {\n    urlBase = process.env.COVERALLS_ENDPOINT;\n  }\n\n  var str = JSON.stringify(obj);\n  var url = urlBase + '/api/v1/jobs';\n  \n  if (index.options.stdout) {\n    process.stdout.write(str);\n    cb(null, { statusCode: 200 }, '');\n  } else {\n    request.post({url : url, form : { json : str}}, function(err, response, body){\n      cb(err, response, body);\n    });\n  }\n};\n\nmodule.exports = sendToCoveralls;\n","/home/travis/build/npmtest/node-npmtest-coveralls/coveralls/lib/getOptions.js":"var fs = require('fs');\nvar path = require('path');\nvar yaml = require('js-yaml');\nvar index = require('../index');\nvar logger = require('./logger')();\nvar fetchGitData = require('./fetchGitData');\n\nvar getBaseOptions = function(cb){\n  var options = {};\n  var git_commit = process.env.COVERALLS_GIT_COMMIT;\n  var git_branch = process.env.COVERALLS_GIT_BRANCH;\n  var git_committer_name, git_committer_email, git_message;\n\n  var match = (process.env.CI_PULL_REQUEST || \"\").match(/(\\d+)$/);\n\n  if (match) {\n    options.service_pull_request = match[1];\n  }\n\n  if (process.env.TRAVIS){\n    options.service_name = 'travis-ci';\n    options.service_job_id = process.env.TRAVIS_JOB_ID;\n    options.service_pull_request = process.env.TRAVIS_PULL_REQUEST;\n    git_commit = 'HEAD';\n    git_branch = process.env.TRAVIS_BRANCH;\n  }\n\n\n  if (process.env.DRONE){\n    options.service_name = 'drone';\n    options.service_job_id = process.env.DRONE_BUILD_NUMBER;\n    options.service_pull_request = process.env.DRONE_PULL_REQUEST;\n    git_committer_name = process.env.DRONE_COMMIT_AUTHOR;\n    git_committer_email = process.env.DRONE_COMMIT_AUTHOR_EMAIL;\n    git_commit = process.env.DRONE_COMMIT;\n    git_branch = process.env.DRONE_BRANCH;\n    git_message = process.env.DRONE_COMMIT_MESSAGE;\n  }\n\n  if (process.env.JENKINS_URL){\n    options.service_name = 'jenkins';\n    options.service_job_id = process.env.BUILD_ID;\n    options.service_pull_request = process.env.ghprbPullId;\n    git_commit = process.env.GIT_COMMIT;\n    git_branch = process.env.GIT_BRANCH;\n  }\n\n  if (process.env.CIRCLECI){\n    options.service_name = 'circleci';\n    options.service_job_id = process.env.CIRCLE_BUILD_NUM;\n\n    if (process.env.CI_PULL_REQUEST) {\n      var pr = process.env.CI_PULL_REQUEST.split('/pull/');\n      options.service_pull_request = pr[1];\n    }\n    git_commit = process.env.CIRCLE_SHA1;\n    git_branch = process.env.CIRCLE_BRANCH;\n  }\n\n  if (process.env.CI_NAME && process.env.CI_NAME === 'codeship'){\n    options.service_name = 'codeship';\n    options.service_job_id = process.env.CI_BUILD_NUMBER;\n    git_commit = process.env.CI_COMMIT_ID;\n    git_branch = process.env.CI_BRANCH;\n    git_committer_name = process.env.CI_COMMITTER_NAME;\n    git_committer_email = process.env.CI_COMMITTER_EMAIL;\n    git_message = process.env.CI_COMMIT_MESSAGE;\n  }\n\n  if (process.env.WERCKER){\n    options.service_name = 'wercker';\n    options.service_job_id = process.env.WERCKER_BUILD_ID;\n    git_commit = process.env.WERCKER_GIT_COMMIT;\n    git_branch = process.env.WERCKER_GIT_BRANCH;\n  }\n\n  if (process.env.GITLAB_CI){\n    options.service_name = 'gitlab-ci';\n    options.service_job_number = process.env.CI_BUILD_NAME;\n    options.service_job_id = process.env.CI_BUILD_ID;\n    git_commit = process.env.CI_BUILD_REF;\n    git_branch = process.env.CI_BUILD_REF_NAME;\n  }\n  if(process.env.APPVEYOR){\n    options.service_name = 'appveyor';\n    options.service_job_number = process.env.APPVEYOR_BUILD_NUMBER;\n    options.service_job_id = process.env.APPVEYOR_BUILD_ID;\n    git_commit = process.env.APPVEYOR_REPO_COMMIT;\n    git_branch = process.env.APPVEYOR_REPO_BRANCH;\n  }\n  if(process.env.SURF_SHA1){\n    options.service_name = 'surf';\n    git_commit = process.env.SURF_SHA1;\n    git_branch = process.env.SURF_REF;\n  }\n  options.run_at = process.env.COVERALLS_RUN_AT || JSON.stringify(new Date()).slice(1, -1);\n  if (process.env.COVERALLS_SERVICE_NAME){\n    options.service_name = process.env.COVERALLS_SERVICE_NAME;\n  }\n  if (process.env.COVERALLS_SERVICE_JOB_ID){\n    options.service_job_id = process.env.COVERALLS_SERVICE_JOB_ID;\n  }\n\n  if (!git_commit || !git_branch) {\n    var data = require('./detectLocalGit')();\n    if (data) {\n      git_commit = git_commit || data.git_commit;\n      git_branch = git_branch || data.git_branch;\n    }\n  }\n\n  if (process.env.COVERALLS_PARALLEL) {\n    options.parallel = true;\n  }\n\n  // try to get the repo token as an environment variable\n  if (process.env.COVERALLS_REPO_TOKEN) {\n    options.repo_token = process.env.COVERALLS_REPO_TOKEN;\n  } else {\n    // try to get the repo token from a .coveralls.yml file\n    var yml = path.join(process.cwd(), '.coveralls.yml');\n    try {\n      if (fs.statSync(yml).isFile()) {\n        var coveralls_yaml_conf = yaml.safeLoad(fs.readFileSync(yml, 'utf8'));\n        options.repo_token = coveralls_yaml_conf.repo_token;\n        if(coveralls_yaml_conf.service_name) {\n          options.service_name = coveralls_yaml_conf.service_name;\n        }\n      }\n    } catch(ex){\n      logger.warn(\"Repo token could not be determined.  Continuing without it.\" +\n                  \"This is necessary for private repos only, so may not be an issue at all.\");\n    }\n  }\n\n  if (git_commit){\n    fetchGitData({\n      head: {\n        id: git_commit,\n        committer_name: git_committer_name,\n        committer_email: git_committer_email,\n        message: git_message\n      },\n      branch: git_branch\n    }, function(err, git){\n      if (err){\n        logger.warn('there was an error getting git data: ', err);\n      } else {\n        options.git = git;\n      }\n      return cb(err, options);\n    });\n  } else {\n    return cb(null, options);\n  }\n};\n\nvar getOptions = function(cb, _userOptions){\n  if (!cb){\n    throw new Error('getOptions requires a callback');\n  }\n\n  var userOptions = _userOptions || {};\n\n  getBaseOptions(function(err, options){\n    // minimist populates options._ with non-option command line arguments\n    var firstNonOptionArgument = index.options._[0];\n\n    if (firstNonOptionArgument)\n      options.filepath = firstNonOptionArgument;\n\n    // lodash or else would be better, but no need for the extra dependency\n    for (var option in userOptions) {\n      options[option] = userOptions[option];\n    }\n    cb(err, options);\n  });\n};\n\nmodule.exports.getBaseOptions = getBaseOptions;\nmodule.exports.getOptions = getOptions;\n","/home/travis/build/npmtest/node-npmtest-coveralls/coveralls/lib/fetchGitData.js":"var exec = require('child_process').exec;\nvar logger = require('./logger')();\n\nfunction fetchGitData(git, cb) {\n  if (!cb){\n    throw new Error(\"fetchGitData requires a callback\");\n  }\n\n  //-- Malformed/undefined git object\n  if ('undefined' === typeof git) {\n    return cb(new Error('No options passed'));\n  }\n  if (!git.hasOwnProperty('head')) {\n    return cb(new Error('You must provide the head'));\n  }\n  if (!git.head.hasOwnProperty('id')) {\n    return cb(new Error('You must provide the head.id'));\n  }\n\n  //-- Set required properties of git if they weren\"t provided\n  if (!git.hasOwnProperty(\"branch\")) {\n    git.branch = \"\";\n  }\n  if (!git.hasOwnProperty(\"remotes\")) {\n    git.remotes = [];\n  }\n\n  //-- Assert the property types\n  if (\"string\" !== typeof git.branch) {\n    git.branch = \"\";\n  }\n  if (!(git.remotes instanceof Array)) {\n    git.remotes = [];\n  }\n\n  //-- Use git?\n  exec(\"git rev-parse --verify \" + git.head.id, function(err, response){\n    if (err){\n      // git is not available...\n      git.head.author_name = git.head.author_name || \"Unknown Author\";\n      git.head.author_email = git.head.author_email || \"\";\n      git.head.committer_name = git.head.committer_name || \"Unknown Committer\";\n      git.head.committer_email = git.head.committer_email || \"\";\n      git.head.message = git.head.message || \"Unknown Commit Message\";\n      return cb(null, git);\n    }\n\n    fetchHeadDetails(git, cb);\n  });\n}\n\nfunction fetchBranch(git, cb) {\n  exec(\"git branch\", function(err, branches){\n    if (err)\n      return cb(err);\n\n    git.branch = (branches.match(/^\\* (\\w+)/) || [])[1];\n    fetchRemotes(git, cb);\n  });\n}\n\nvar REGEX_COMMIT_DETAILS = /\\nauthor (.+?) <([^>]*)>.+\\ncommitter (.+?) <([^>]*)>.+[\\S\\s]*?\\n\\n(.*)/m;\n\nfunction fetchHeadDetails(git, cb) {\n  exec('git cat-file -p ' + git.head.id, function(err, response) {\n    if (err)\n      return cb(err);\n\n    var items = response.match(REGEX_COMMIT_DETAILS).slice(1);\n    var fields = ['author_name', 'author_email', 'committer_name', 'committer_email', 'message'];\n    fields.forEach(function(field, index) {\n      git.head[field] = items[index];\n    });\n\n    if (git.branch) {\n      fetchRemotes(git, cb);\n    } else {\n      fetchBranch(git, cb);\n    }\n  });\n}\n\nfunction fetchRemotes(git, cb) {\n  exec(\"git remote -v\", function(err, remotes){\n    if (err)\n      return cb(err);\n\n    var processed = {};\n    remotes.split(\"\\n\").forEach(function(remote) {\n      if (!/\\s\\(push\\)$/.test(remote))\n        return;\n      remote = remote.split(/\\s+/);\n      saveRemote(processed, git, remote[0], remote[1]);\n    });\n    cb(null, git);\n  });\n}\n\nfunction saveRemote(processed, git, name, url) {\n  var key = name + \"-\" + url;\n  if (processed.hasOwnProperty(key))\n    return;\n\n  processed[key] = true;\n  git.remotes.push({ name: name, url: url });\n}\n\nmodule.exports = fetchGitData;\n","/home/travis/build/npmtest/node-npmtest-coveralls/coveralls/lib/handleInput.js":"var index = require('../index');\nvar logger = require('./logger')();\n\nfunction handleInput(input, cb, userOptions) {\n  logger.debug(input);\n  logger.debug('user options ' + userOptions);\n\tindex.getOptions(function(err, options){\n\n    if (err){\n      logger.error(\"error from getOptions\");\n      cb(err);\n      return;\n    }\n    logger.debug(options);\n\n    index.convertLcovToCoveralls(input, options, function(err, postData){\n      if (err){\n        logger.error(\"error from convertLcovToCoveralls\");\n        cb(err);\n        return;\n      }\n      logger.info(\"sending this to coveralls.io: \", JSON.stringify(postData));\n      index.sendToCoveralls(postData, function(err, response, body){\n        if (err){\n          cb(err);\n          return;\n        }\n        if (response.statusCode >= 400){\n          cb(\"Bad response: \" + response.statusCode + \" \" + body);\n          return;\n        }\n        logger.debug(response.statusCode);\n        logger.debug(body);\n        cb(null);\n      });\n    });\n  }, userOptions);\n}\n\nmodule.exports = handleInput;\n"}